Q11.Java Program to Display Sum of Each Row and Column of a Matrix
public class MatrixSum {
    public static void main(String[] args) {
        int[][] mat = {{1,2,3},{4,5,6},{7,8,9}};
        int rows = mat.length, cols = mat[0].length;
        for(int i=0; i<rows; i++) {
            int rowSum = 0;
            for(int j=0; j<cols; j++)
                rowSum += mat[i][j];
            System.out.println("Row "+i+" sum: "+rowSum);
        }
        for(int j=0; j<cols; j++) {
            int colSum = 0;
            for(int i=0; i<rows; i++)
                colSum += mat[i][j];
            System.out.println("Column "+j+" sum: "+colSum);
        }
    }
}
o/p;
Row 0 sum: 6
Row 1 sum: 15
Row 2 sum: 24
Column 0 sum: 12
Column 1 sum: 15
Column 2 sum: 18


17. Develop a JAVA program to create a class and print student details
class Student {
    int id; String name;
    Student(int i, String n) { id = i; name = n; }
    void display() { System.out.println(id+" "+name); }
}
public class Main {
    public static void main(String[] args) {
        Student s = new Student(101, "John");
        s.display();
    }
}
o/p;
101 Sonu

20. Develop a JAVA program to create a class called "Person" with name and age attribute. Create two instances using constructor, print details.
class Person {
    String name; int age;
    Person(String n, int a) { name = n; age = a; }
    void display() { System.out.println(name+" "+age); }
}
public class Main {
    public static void main(String[] args) {
        Person p1 = new Person("Sonu", 21);
        Person p2 = new Person("Asha", 19);
        p1.display(); p2.display();
    }
}
o/p;
Sonu 21
Asha 19

21. Develop a JAVA program to create a class "Airplane" with flight number, destination, departure time attributes, and methods to check status and delay.
class Airplane {
    String flightNo, dest; int depTime;
    Airplane(String f, String d, int t) { flightNo=f; dest=d; depTime=t; }
    void status() { System.out.println("Flight "+flightNo+" to "+dest); }
    void delay(int newTime) {
        if(newTime > depTime) System.out.println("Delayed by "+(newTime - depTime)+" mins");
        else System.out.println("On time");
    }
}
public class Main {
    public static void main(String[] args) {
        Airplane a = new Airplane("AI101", "Delhi", 900);
        a.status();
        a.delay(945);
    }
}
o/p;
Flight AI101 to Delhi
Delayed by 45 mins

26. Create abstract class Shape with abstract methods calculateArea() and calculatePerimeter(). Subclasses Circle and Triangle implement these.
abstract class Shape {
    abstract double calculateArea();
    abstract double calculatePerimeter();
}
class Circle extends Shape {
    double r;
    Circle(double radius) { r = radius; }
    double calculateArea() { return 3.14*r*r; }
    double calculatePerimeter() { return 2*3.14*r; }
}
class Triangle extends Shape {
    double a,b,c;
    Triangle(double x,double y,double z){a=x;b=y;c=z;}
    double calculateArea() {
        double s=(a+b+c)/2;
        return Math.sqrt(s*(s-a)*(s-b)*(s-c));
    }
    double calculatePerimeter(){return a+b+c;}
}
public class Main {
    public static void main(String[] args) {
        Shape c = new Circle(7);
        Shape t = new Triangle(3,4,5);
        System.out.println("Circle area: "+c.calculateArea());
        System.out.println("Triangle perimeter: "+t.calculatePerimeter());
    }
}
o/p;
Circle area: 153.86
Triangle perimeter: 12.0

27. Abstract class BankAccount with deposit() and withdraw(). Subclasses SavingsAccount and CurrentAccount implement these?
abstract class BankAccount {
    double balance;
    abstract void deposit(double amt);
    abstract void withdraw(double amt);
}
class SavingsAccount extends BankAccount {
    void deposit(double amt) { balance += amt; }
    void withdraw(double amt) {
        if(balance>=amt) balance -= amt;
        else System.out.println("Insufficient balance");
    }
}
class CurrentAccount extends BankAccount {
    void deposit(double amt) { balance += amt; }
    void withdraw(double amt) {
        if(balance+5000>=amt) balance -= amt;
        else System.out.println("Overdraft limit exceeded");
    }
}
public class Main {
    public static void main(String[] args) {
        SavingsAccount sa = new SavingsAccount();
        sa.deposit(1000);
        sa.withdraw(500);
        System.out.println("Savings balance: "+sa.balance);
        CurrentAccount ca = new CurrentAccount();
        ca.deposit(2000);
        ca.withdraw(7000);
        System.out.println("Current balance: "+ca.balance);
    }
}
o/p;
Savings balance: 500.0
Current balance: -5000.0

27. Abstract class BankAccount with deposit() and withdraw(). Subclasses SavingsAccount and CurrentAccount implement these?
abstract class BankAccount {
    double balance;
    abstract void deposit(double amt);
    abstract void withdraw(double amt);
}
class SavingsAccount extends BankAccount {
    void deposit(double amt) { balance += amt; }
    void withdraw(double amt) {
        if(balance >= amt) balance -= amt;
        else System.out.println("Insufficient balance");
    }
}
class CurrentAccount extends BankAccount {
    void deposit(double amt) { balance += amt; }
    void withdraw(double amt) {
        if(balance + 5000 >= amt) balance -= amt;
        else System.out.println("Overdraft limit exceeded");
    }
}
public class Main {
    public static void main(String[] args) {
        SavingsAccount sa = new SavingsAccount();
        sa.deposit(1000);
        sa.withdraw(500);
        System.out.println("Savings balance: "+sa.balance);
        CurrentAccount ca = new CurrentAccount();
        ca.deposit(2000);
        ca.withdraw(7000);
        System.out.println("Current balance: "+ca.balance);
    }
}
o/p;
Savings balance: 500.0
Current balance: 2000.0

28. Abstract Employee, Manager, Programmer
abstract class Employee {
    String name;
    Employee(String n){name=n;}
    abstract double calcSalary();
    void display() {System.out.println(name+" "+calcSalary());}
}
class Manager extends Employee {
    double b,a;
    Manager(String n,double b,double a){super(n);this.b=b;this.a=a;}
    double calcSalary(){return b+a;}
}
class Programmer extends Employee {
    double b,bo;
    Programmer(String n,double b,double bo){super(n);this.b=b;this.bo=bo;}
    double calcSalary(){return b+bo;}
}
public class Main {
    public static void main(String[] args) {
        Manager m=new Manager("Sonu",50000,10000);
        Programmer p=new Programmer("Asha",40000,5000);
        m.display(); p.display();
    }
}
o/p;
Sonu 60000.0
Asha 45000.0

29. Animal, Lion, Tiger, Panther
class Animal {
    void eat(){System.out.println("Animal eats");}
    void sound(){System.out.println("Animal sound");}
}
class Lion extends Animal {
    void eat(){System.out.println("Lion eats meat");}
    void sound(){System.out.println("Lion roars");}
}
class Tiger extends Animal {
    void eat(){System.out.println("Tiger eats meat");}
    void sound(){System.out.println("Tiger growls");}
}
class Panther extends Animal {
    void eat(){System.out.println("Panther eats meat");}
    void sound(){System.out.println("Panther snarls");}
}
public class Main {
    public static void main(String[] args) {
        Animal a=new Lion(); a.eat(); a.sound();
        a=new Tiger(); a.eat(); a.sound();
        a=new Panther(); a.eat(); a.sound();
    }
}
o/p;
Lion eats meat
Lion roars
Tiger eats meat
Tiger growls
Panther eats meat
Panther snarls

30. final keyword usage (variable, method, class)
final class F {
    final int x=10;
    final void show(){System.out.println(x);}
}
public class Main {
    public static void main(String[] args) {
        F f=new F();
        f.show();
    }
}
o/p;
10

37. Applet - Keyboard Events
import java.applet.Applet;
import java.awt.*;
import java.awt.event.*;

public class KeyboardApplet extends Applet implements KeyListener {
    String msg = "";
    public void init() { addKeyListener(this); setFocusable(true); }
    public void keyPressed(KeyEvent e) { msg = "Pressed: " + e.getKeyChar(); repaint(); }
    public void keyReleased(KeyEvent e) { msg = "Released: " + e.getKeyChar(); repaint(); }
    public void keyTyped(KeyEvent e) { msg = "Typed: " + e.getKeyChar(); repaint(); }
    public void paint(Graphics g) { g.drawString(msg, 20, 50); }
}
Output:
Displays "Pressed: a", "Released: a", or "Typed: a" depending on key event.

38. Applet - Mouse Events
import java.applet.Applet;
import java.awt.*;
import java.awt.event.*;

public class MouseApplet extends Applet implements MouseListener {
    String msg = "";
    public void init() { addMouseListener(this); }
    public void mouseClicked(MouseEvent e) { msg = "Clicked at " + e.getX() + "," + e.getY(); repaint(); }
    public void mouseEntered(MouseEvent e) { msg = "Mouse Entered"; repaint(); }
    public void mouseExited(MouseEvent e) { msg = "Mouse Exited"; repaint(); }
    public void mousePressed(MouseEvent e) { msg = "Mouse Pressed"; repaint(); }
    public void mouseReleased(MouseEvent e) { msg = "Mouse Released"; repaint(); }
    public void paint(Graphics g) { g.drawString(msg, 20, 50); }
}
Output:
Shows mouse event type and location on applet window.

39. Applet - Button Click
import java.applet.Applet;
import java.awt.*;
import java.awt.event.*;

public class ButtonApplet extends Applet implements ActionListener {
    Button b;
    String msg = "";
    public void init() {
        b = new Button("Click");
        add(b);
        b.addActionListener(this);
    }
    public void actionPerformed(ActionEvent e) {
        msg = "Button Clicked";
        repaint();
    }
    public void paint(Graphics g) { g.drawString(msg, 20, 50); }
}
Output:
Displays "Button Clicked" on button press.

40. Applet - Mouse Motion
import java.applet.Applet;
import java.awt.*;
import java.awt.event.*;

public class MouseMotionApplet extends Applet implements MouseMotionListener {
    int x = 0, y = 0;
    public void init() { addMouseMotionListener(this); }
    public void mouseDragged(MouseEvent e) { x = e.getX(); y = e.getY(); repaint(); }
    public void mouseMoved(MouseEvent e) { x = e.getX(); y = e.getY(); repaint(); }
    public void paint(Graphics g) { g.drawString("Mouse at " + x + "," + y, 20, 50); }
}
Output:
Shows current mouse position on mouse move or drag.

41. Menu GUI
import javax.swing.*;
import java.awt.event.*;

public class MenuExample extends JFrame implements ActionListener {
    JTextArea ta = new JTextArea();
    public MenuExample() {
        setSize(300, 200);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        JMenuBar mb = new JMenuBar();
        JMenu file = new JMenu("File");
        JMenuItem newI = new JMenuItem("New"), exitI = new JMenuItem("Exit");
        newI.addActionListener(this); exitI.addActionListener(this);
        file.add(newI); file.add(exitI);
        mb.add(file);
        setJMenuBar(mb);
        add(ta);
        setVisible(true);
    }
    public void actionPerformed(ActionEvent e) {
        if (e.getActionCommand().equals("Exit")) System.exit(0);
        else ta.setText(e.getActionCommand() + " Selected");
    }
    public static void main(String[] args) { new MenuExample(); }
}
Output:
Shows "New Selected" in text area when "New" clicked; exits on "Exit".

43. Card Layout
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class CardLayoutExample extends JFrame implements ActionListener {
    CardLayout cl = new CardLayout();
    JPanel cards = new JPanel(cl);
    public CardLayoutExample() {
        setSize(300, 200);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        cards.add(new JLabel("Card 1"), "1");
        cards.add(new JLabel("Card 2"), "2");
        add(cards, BorderLayout.CENTER);
        JPanel btnPanel = new JPanel();
        JButton b1 = new JButton("1"), b2 = new JButton("2");
        b1.addActionListener(this); b2.addActionListener(this);
        btnPanel.add(b1); btnPanel.add(b2);
        add(btnPanel, BorderLayout.SOUTH);
        setVisible(true);
    }
    public void actionPerformed(ActionEvent e) {
        cl.show(cards, e.getActionCommand());
    }
    public static void main(String[] args) { new CardLayoutExample(); }
}
Output:
Click buttons "1" or "2" to switch between Card 1 and Card 2 display.

47. Dialog Box
import javax.swing.*;
import java.awt.event.*;

public class DialogExample extends JFrame implements ActionListener {
    JButton btn = new JButton("Show Dialog");
    public DialogExample() {
        setSize(300, 200);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        add(btn);
        btn.addActionListener(this);
        setVisible(true);
    }
    public void actionPerformed(ActionEvent e) {
        JOptionPane.showMessageDialog(this, "This is a dialog box");
    }
    public static void main(String[] args) { new DialogExample(); }
}
Output:
Shows dialog box with message "This is a dialog box" on button click.


////////////////////////////////////////////////////////////////////////

12. Array Search
public class ArraySearch {
    public static void main(String[] args) {
        int[] arr = {5,3,7,1,9};
        int key = 7, pos = -1;
        for(int i=0;i<arr.length;i++) {
            if(arr[i]==key) { pos=i; break; }
        }
        if(pos!=-1) System.out.println(key+" found at index "+pos);
        else System.out.println(key+" not found");
    }
}
Output:
7 found at index 2

13. Remove Element from Array
import java.util.Arrays;
public class RemoveElement {
    public static void main(String[] args) {
        int[] arr = {2,4,6,8,4};
        int rem=4, n=arr.length;
        int[] res = new int[n];
        int j=0;
        for(int i=0;i<n;i++) {
            if(arr[i]!=rem) res[j++]=arr[i];
        }
        System.out.println("After removal: "+Arrays.toString(Arrays.copyOf(res,j)));
    }
}
Output:
After removal: [2, 6, 8]

14. Insert Element at Position
import java.util.Arrays;
public class InsertElement {
    public static void main(String[] args) {
        int[] arr = {1,2,4,5};
        int pos=2, val=3;
        int[] res = new int[arr.length+1];
        for(int i=0;i<pos;i++) res[i]=arr[i];
        res[pos]=val;
        for(int i=pos;i<arr.length;i++) res[i+1]=arr[i];
        System.out.println("After insert: "+Arrays.toString(res));
    }
}
Output:
After insert: [1, 2, 3, 4, 5]

15. Common Elements Between Arrays
import java.util.*;
public class CommonElements {
    public static void main(String[] args) {
        int[] a = {1,2,3,4}, b = {3,4,5,6};
        Set<Integer> setA = new HashSet<>();
        for(int x : a) setA.add(x);
        System.out.print("Common elements: ");
        for(int x : b) {
            if(setA.contains(x)) System.out.print(x+" ");
        }
    }
}
Output:
Common elements: 3 4 

16. Remove Duplicates & Print New Length
import java.util.*;
public class RemoveDuplicates {
    public static void main(String[] args) {
        int[] arr = {20,20,30,40,50,50,50};
        Set<Integer> set = new LinkedHashSet<>();
        for(int x : arr) set.add(x);
        System.out.println("New length: "+set.size());
        System.out.println("Array: "+set);
    }
}
Output:
New length: 4  
Array: [20, 30, 40, 50]

18. Rectangle Area with Class
import java.util.Scanner;
class Area {
    int length, breadth;
    void setDim(int l, int b) { length=l; breadth=b; }
    int getArea() { return length*breadth; }
}
public class RectangleArea {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        Area a = new Area();
        System.out.print("Length: ");
        int l = sc.nextInt();
        System.out.print("Breadth: ");
        int b = sc.nextInt();
        a.setDim(l,b);
        System.out.println("Area: "+a.getArea());
    }
}
Output (example):
Length: 5  
Breadth: 4  
Area: 20

19. Employee Salary Class
class Employee {
    String name, jobTitle;
    double salary;
    Employee(String n, String j, double s) {
        name=n; jobTitle=j; salary=s;
    }
    void updateSalary(double inc) { salary+=inc; }
    void display() {
        System.out.println(name+", "+jobTitle+", Salary: "+salary);
    }
}
public class EmpSalary {
    public static void main(String[] args) {
        Employee e = new Employee("Sonu","Developer", 30000);
        e.display();
        e.updateSalary(5000);
        e.display();
    }
}
Output:
Sonu, Developer, Salary: 30000.0  
Sonu, Developer, Salary: 35000.0

22. Static Usage
class Test {
    static int count;
    static { count=10; }
    static void show() { System.out.println("Count: "+count); }
    static class Nested {
        void nestedMethod() { System.out.println("Nested count: "+count); }
    }
}
public class StaticDemo {
    public static void main(String[] args) {
        Test.show();
        Test.Nested n = new Test.Nested();
        n.nestedMethod();
    }
}
Output:
Count: 10  
Nested count: 10

23. Method Overloading
class Overload {
    int add(int a, int b) { return a+b; }
    double add(double a, double b) { return a+b; }
}
public class MethodOverload {
    public static void main(String[] args) {
        Overload o = new Overload();
        System.out.println(o.add(2,3));
        System.out.println(o.add(2.5,3.5));
    }
}
Output:
5  
6.0

30. Final Keyword
final class FinalClass {
    final int val = 100;
    final void show() { System.out.println("Value: "+val); }
}
public class FinalDemo {
    public static void main(String[] args) {
        FinalClass f = new FinalClass();
        f.show();
    }
}
Output:
Value: 100

